{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"api-reference/impute/","title":"Imputation","text":""},{"location":"api-reference/impute/#polars_credit.impute.FixedValueImputer","title":"<code>FixedValueImputer</code>","text":"<p>Imputer that fills missing values with fixed values for specified columns.</p> <p>This transformer allows for imputation of missing values in a DataFrame using predefined fixed values for specified columns.</p> <p>Parameters:</p> Name Type Description Default <code>fill_value_dict</code> <code>dict</code> <p>A dictionary where keys are column names and values are the fixed values to use for imputation in those columns.</p> required <p>Attributes:</p> Name Type Description <code>fill_value_dict_</code> <code>dict</code> <p>The fitted dictionary of column names and their corresponding imputation values.</p> <p>Methods:</p> Name Description <code>fit</code> <p>Fit the imputer to the input DataFrame.</p> <code>transform</code> <p>Impute missing values in the input DataFrame using the fixed values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from polars_credit.impute import FixedValueImputer\n&gt;&gt;&gt; df = pl.DataFrame({\"A\": [1, None, 3], \"B\": [\"x\", None, \"z\"]})\n&gt;&gt;&gt; imputer = FixedValueImputer({\"A\": 0, \"B\": \"unknown\"})\n&gt;&gt;&gt; imputer.fit_transform(df)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 A   \u2506 B       \u2502\n\u2502 --- \u2506 ---     \u2502\n\u2502 i64 \u2506 str     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 x       \u2502\n\u2502 0   \u2506 unknown \u2502\n\u2502 3   \u2506 z       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> Notes <p>This imputer is particularly useful when you have domain knowledge about appropriate default values for specific columns in your dataset.</p>"},{"location":"api-reference/impute/#polars_credit.impute.FixedValueImputer.fit","title":"<code>fit(X, y=None)</code>","text":"<p>Fit the imputer to the input DataFrame.</p> <p>This method validates that all columns specified in the fill_value_dict are present in the input DataFrame. It then stores the fill_value_dict as an attribute for use in the transform method.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>DataFrame</code> <p>The input DataFrame to fit the imputer on.</p> required <code>y</code> <code>None</code> <p>Ignored. This parameter exists only for compatibility with scikit-learn's transformer interface.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>self</code> <code>FixedValueImputer</code> <p>Returns the instance itself.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any column specified in fill_value_dict is not present in X.</p>"},{"location":"api-reference/impute/#polars_credit.impute.FixedValueImputer.transform","title":"<code>transform(X)</code>","text":"<p>Transform the input DataFrame by imputing missing values with fixed values.</p> <p>This method applies the fixed value imputation to the specified columns in the input DataFrame using the fill values provided during initialization.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>DataFrame</code> <p>The input DataFrame to transform.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A new DataFrame with missing values imputed in the specified columns.</p> Notes <p>This method uses the <code>fill_value_dict_</code> attribute set during the fit method to determine which columns to impute and what values to use for imputation.</p>"},{"location":"api-reference/woe/","title":"WOE","text":""},{"location":"api-reference/woe/#polars_credit.woe.WOETransformer","title":"<code>WOETransformer</code>","text":"<p>A transformer that applies Weight of Evidence (WOE) encoding to features.</p> <p>This class implements WOE encoding, a technique that transforms categorical variables into continuous variables based on their relationship with a binary target variable. It's particularly useful in credit scoring and risk modeling.</p> <p>Attributes:</p> Name Type Description <code>woe_maps</code> <code>dict</code> <p>A dictionary storing the WOE mappings for each feature. Keys are feature names, and values are DataFrames containing the original values and their corresponding WOE values.</p> <p>Methods:</p> Name Description <code>fit</code> <p>Compute the WOE mappings for each feature in X with respect to y.</p> <code>transform</code> <p>Transform the input features using the computed WOE mappings.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from polars_credit.woe import WOETransformer\n&gt;&gt;&gt; X = pl.DataFrame({\"A\": [\"a\", \"b\", \"a\", \"c\"], \"B\": [1, 2, 1, 3]})\n&gt;&gt;&gt; y = pl.Series([0, 1, 0, 1])\n&gt;&gt;&gt; woe = WOETransformer()\n&gt;&gt;&gt; woe.fit(X, y)\n&gt;&gt;&gt; X_woe = woe.transform(X)\n</code></pre> Notes <p>The WOE transformation is defined as: WOE = ln(%of non-events / %of events)</p> <p>This transformer uses lazy evaluation for efficiency and can handle large datasets.</p>"},{"location":"api-reference/woe/#polars_credit.woe.WOETransformer.fit","title":"<code>fit(X, y)</code>","text":"<p>Compute the Weight of Evidence (WOE) mappings for each feature.</p> <p>This method calculates the WOE values for each unique value in every feature of the input DataFrame X, with respect to the binary target variable y.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>DataFrame</code> <p>The input DataFrame containing the features to be encoded.</p> required <code>y</code> <code>Series</code> <p>The binary target variable.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>WOETransformer</code> <p>Returns the instance itself.</p> Notes <p>This method populates the <code>woe_maps</code> attribute with WOE mappings for each feature. Each mapping is stored as a DataFrame containing the original feature values and their corresponding WOE values.</p> <p>The WOE calculation is performed using lazy evaluation for efficiency.</p>"},{"location":"api-reference/woe/#polars_credit.woe.WOETransformer.transform","title":"<code>transform(X)</code>","text":"<p>Transform the input DataFrame using the computed WOE mappings.</p> <p>This method applies the Weight of Evidence (WOE) transformation to each feature in the input DataFrame, using the WOE mappings computed during the fit phase.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>DataFrame</code> <p>The input DataFrame to be transformed.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A new DataFrame with all features transformed to their WOE values.</p> Notes <p>This method replaces each value in the input DataFrame with its corresponding WOE value, as determined by the mappings in the <code>woe_maps</code> attribute. If a value is encountered that was not present during the fit phase, it will be replaced with a null value.</p> <p>The transformation is performed using Polars' efficient column operations.</p>"},{"location":"api-reference/woe/#polars_credit.woe.get_woe","title":"<code>get_woe(df, y, x)</code>","text":"<p>Calculate the Weight of Evidence (WOE) for a binary target variable.</p> <p>This function computes the Weight of Evidence (WOE) for each category of a feature with respect to a binary target variable.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The input DataFrame containing both the feature and target variable.</p> required <code>y</code> <code>str</code> <p>The name of the binary target variable column (0 or 1).</p> required <code>x</code> <code>str</code> <p>The name of the feature column for which WOE is calculated.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame with the following columns: - The original feature column - 'good': Count of target=0 for each category - 'bad': Count of target=1 for each category - Normalized 'good' and 'bad' (as proportions) - 'woe': The calculated Weight of Evidence for each category</p> Notes <p>WOE is calculated as ln(% of bad / % of good) for each category of the feature. The resulting DataFrame is sorted by the feature values.</p> <p>This function uses lazy evaluation for efficiency and can handle large datasets.</p>"}]}